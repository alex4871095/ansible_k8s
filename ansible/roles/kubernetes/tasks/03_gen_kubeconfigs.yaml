---
- name: generate kubeconfig files for kubelet
  become: true
  shell: kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://{{ cluster_public_ip }}:6443 --kubeconfig={{ item.key }}.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
    creates: "{{ item.key }}.kubeconfig"
  with_dict: "{{ host_roles }}"
  when: item.value.type == "worker"

- name: set-credentials for kubeconfig files for kubelet
  become: true
  shell: kubectl config set-credentials system:node:{{ item.key }} --client-certificate={{ item.key }}.pem --client-key={{ item.key }}-key.pem --embed-certs=true --kubeconfig={{ item.key }}.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
  with_dict: "{{ host_roles }}"
  when: item.value.type == "worker"

- name: set-context for kubeconfig files for kubelet
  become: true
  shell: kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:node:{{ item.key }} --kubeconfig={{ item.key }}.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
  with_dict: "{{ host_roles }}"
  when: item.value.type == "worker"

- name: use-contex for kubeconfig files for kubelet
  become: true
  shell: kubectl config use-context default --kubeconfig={{ item.key }}.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
  with_dict: "{{ host_roles }}"
  when: item.value.type == "worker"

- name: generate kubeconfig files for kube-proxy
  become: true
  shell: kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://{{ cluster_public_ip }}:6443 --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
    creates: "kube-proxy.kubeconfig"

- name: set-credentials for kubeconfig files for kube-proxy
  become: true
  shell: kubectl config set-credentials system:kube-proxy --client-certificate=kube-proxy.pem --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: set-context for kubeconfig files for kube-proxy
  become: true
  shell: kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:kube-proxy --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: use-context for kubeconfig files for kube-proxy
  become: true
  shell: kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: generate kubeconfig file for kube-controller-manager
  become: true
  shell: kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-controller-manager.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
    creates: "kube-controller-manager.kubeconfig"

- name: set-credentials for kubeconfig file for kube-controller-manager
  become: true
  shell: kubectl config set-credentials system:kube-controller-manager --client-certificate=kube-controller-manager.pem --client-key=kube-controller-manager-key.pem --embed-certs=true --kubeconfig=kube-controller-manager.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: set-context for kubeconfig file for kube-controller-manager
  become: true
  shell: kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:kube-controller-manager --kubeconfig=kube-controller-manager.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: use-context for kubeconfig file for kube-controller-manager
  become: true
  shell: kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: generate kubeconfig file for kube-scheduler
  become: true
  shell: kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-scheduler.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
    creates: "kube-scheduler.kubeconfig"

- name: set-credentials for kubeconfig file for kube-scheduler
  become: true
  shell: kubectl config set-credentials system:kube-scheduler --client-certificate=kube-scheduler.pem --client-key=kube-scheduler-key.pem --embed-certs=true --kubeconfig=kube-scheduler.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: set-context for kubeconfig file for kube-scheduler
  become: true
  shell: kubectl config set-context default --cluster=kubernetes-the-hard-way --user=system:kube-scheduler --kubeconfig=kube-scheduler.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: use-context for kubeconfig file for kube-scheduler
  become: true
  shell: kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: generate kubeconfig file for admin
  become: true
  shell: kubectl config set-cluster kubernetes-the-hard-way --certificate-authority=ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=admin.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"
    creates: "admin.kubeconfig"

- name: set-credential for kubeconfig file for admin
  become: true
  shell: kubectl config set-credentials admin --client-certificate=admin.pem --client-key=admin-key.pem --embed-certs=true --kubeconfig=admin.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: set-context for kubeconfig file for admin
  become: true
  shell: kubectl config set-context default --cluster=kubernetes-the-hard-way --user=admin --kubeconfig=admin.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: use-context for kubeconfig file for admin
  become: true
  shell: kubectl config use-context default --kubeconfig=admin.kubeconfig
  args:
    chdir: "/etc/ansible/roles/kubernetes/files/"

- name: set permissions on kubeconfigs 1
  become: true
  file:
    path: "{{ item }}"
    owner: "{{ setup_user }}"
  with_items:
    - "/etc/ansible/roles/kubernetes/files/admin.kubeconfig"
    - "/etc/ansible/roles/kubernetes/files/kube-scheduler.kubeconfig"
    - "/etc/ansible/roles/kubernetes/files/kube-controller-manager.kubeconfig"
    - "/etc/ansible/roles/kubernetes/files/kube-proxy.kubeconfig"

- name: set permissions on kubeconfigs 2
  become: true
  file:
    path: "/etc/ansible/roles/kubernetes/files/{{ item.key }}.kubeconfig"
    owner: "{{ setup_user }}"
  with_dict: "{{ host_roles }}"
  when: item.value.type == "worker"
